# -*- coding: utf-8 -*-
"""KMeans&PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IrjPZrUOFyy7e5jQrWa53-BojCrFi1wM

**Setup**
"""

!pip install pandas scikit-learn matplotlib seaborn
import pandas as pd

#Load data
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00352/Online%20Retail.xlsx"
data = pd.read_excel(url)

print(data.head())
print(data.shape)

"""***Data Cleaning***

Creating a new dataset with just Quantity and Unit Price.
"""

data = data.dropna()

#Using numeric columns
data_numeric = data[['Quantity','UnitPrice']]

#Removing outliers
data_numeric = data_numeric[(data_numeric['Quantity']>0) & (data_numeric['UnitPrice']>0)]

#Check result
print(data_numeric.head())
print(data_numeric.shape)

"""**Using The Elbow Method**

After running the code block, it appears that 3 is the elbow.
"""

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

#Small sample for speed
data_sample = data_numeric.sample(1000, random_state=42)

#Calculate inertia
inertia = []
for k in range (1,11):
  kmeans = KMeans(n_clusters=k, random_state=42)
  kmeans.fit(data_sample)
  inertia.append(kmeans.inertia_)

#Plot elbow curve
plt.plot(range(1,11), inertia, marker='o')
plt.title("Elbow Method for Optimal K")
plt.xlabel("Number of Clusters (K)")
plt.ylabel("Inertia")
plt.show()

"""**Applying K-Means Clustering**

Cluster 0 has 998 data points, Cluster 1 has one, and Cluster 2 has one.
"""

#K-Means with chosen K (in this case, 3)
kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(data_sample)

#Add clusters
data_sample['Cluster'] = clusters

#Check result
print(data_sample.head())
print("Cluster counts:", data_sample['Cluster'].value_counts())

"""**Reducing with PCA**"""

from sklearn.decomposition import PCA

#Features for PCA
features = data_sample[['Quantity','UnitPrice']] #the variables in our data_numeric dataset

#Reduce to 2D
pca = PCA(n_components=2)
pca_result = pca.fit_transform(features)

#New dataframe
pca_df = pd.DataFrame(pca_result, columns=['PC1','PC2'])
pca_df['Cluster'] = data_sample['Cluster']

#Check result
print(pca_df.head())
print("Explained variance ratio:", pca.explained_variance_ratio_)

"""**Visualizing Clusters**"""

plt.figure(figsize=(10,6))
plt.scatter(data_sample['Quantity'], data_sample['UnitPrice'], c=clusters,
            cmap='viridis', edgecolor='k', s=50)
plt.title("Clusters")
plt.xlabel("PCA Component #1")
plt.ylabel("PCA Component #2")
plt.show()